{"version":3,"sources":["components/BreakInterval/BreakInterval.js","components/SessionInterval/SessionInterval.js","components/TimerInterval/Timer.js","App.js","serviceWorker.js","index.js"],"names":["BreakInterval","props","id","disabled","isPlay","onClick","currentInterval","breakInterval","onBreakIntervalChange","className","SessionInterval","sessionInterval","onSessionIntervalChange","Timer","state","timerSeconds","intervalId","isSessionInterval","playStopTimer","bind","resetTimer","event","target","dataset","type","this","onPlayChange","decreaseTimer","clearInterval","setInterval","timerMinute","setState","onTimerMinuteChange","timerClass","style","color","data-type","React","Component","App","onResetTimer","newBreakLength","newSessionLength","minuteChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9b5879a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./BreakInterval.css\";\n\nfunction BreakInterval(props) {\n  function increaseCounter() {\n    props.onBreakIntervalChange(props.breakInterval + 1);\n  }\n\n  function decreaseCounter() {\n    const currentInterval = props.breakInterval;\n\n    if (currentInterval === 0) {\n      return;\n    }\n\n    props.onBreakIntervalChange(currentInterval - 1);\n  }\n\n  return (\n    <section id=\"break-interval-container\">\n      <h4>Break Length :</h4>\n      <section id=\"break-time-interval\">\n        <button\n          disabled={props.isPlay ? \"disabled\" : \"\"}\n          onClick={decreaseCounter}\n          className=\"counter-btn\"\n        >\n          Down\n        </button>\n        <p className=\"break-time\">{props.breakInterval}</p>\n        <button\n          disabled={props.isPlay ? \"disabled\" : \"\"}\n          onClick={increaseCounter}\n          className=\"counter-btn\"\n        >\n          Up\n        </button>\n      </section>\n    </section>\n  );\n}\n\nexport default BreakInterval;\n","import React from \"react\";\nimport \"./Actions.css\";\nimport \"./SessionInterval.css\";\n\nfunction SessionInterval(props) {\n  function increaseCounter() {\n    const currentInterval = props.sessionInterval;\n\n    if (currentInterval >= 60) {\n      return;\n    }\n    props.onSessionIntervalChange(props.sessionInterval + 1);\n  }\n\n  function decreaseCounter() {\n    const currentInterval = props.sessionInterval;\n\n    if (currentInterval === 0) {\n      return;\n    }\n\n    props.onSessionIntervalChange(currentInterval - 1);\n  }\n\n  return (\n    <section id=\"session-interval-container\">\n      <h4>Session Length :</h4>\n      <section id=\"session-interval\">\n        <button\n          disabled={props.isPlay ? \"disabled\" : \"\"}\n          onClick={decreaseCounter}\n          className=\"counter-btn\"\n        >\n          Down\n        </button>\n        <p className=\"session-time\">{props.sessionInterval}</p>\n        <button\n          disabled={props.isPlay ? \"disabled\" : \"\"}\n          onClick={increaseCounter}\n          className=\"counter-btn\"\n        >\n          Up\n        </button>\n      </section>\n    </section>\n  );\n}\n\nexport default SessionInterval;\n","import React from \"react\";\nimport \"./TimerInterval.css\";\n\nclass Timer extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      timerSeconds: 0,\n      intervalId: \"\",\n      isSessionInterval: true\n    };\n\n    this.playStopTimer = this.playStopTimer.bind(this);\n    this.resetTimer = this.resetTimer.bind(this);\n  }\n\n  playStopTimer(event) {\n    const action = event.target.dataset.type;\n\n    switch (action) {\n      case \"play\":\n        this.props.onPlayChange(true);\n        this.decreaseTimer();\n        break;\n      case \"stop\":\n        this.props.onPlayChange(false);\n        clearInterval(this.state.intervalId);\n        break;\n      default:\n        break;\n    }\n  }\n\n  decreaseTimer() {\n    let intervalId = setInterval(() => {\n      switch (this.state.timerSeconds) {\n        case 0:\n          if (this.props.timerMinute === 0) {\n            if (this.state.isSessionInterval) {\n              // start break timer\n              this.setState({\n                isSessionInterval: false\n              });\n\n              this.props.onTimerMinuteChange(this.props.breakInterval);\n            } else {\n              // start session timer\n              this.setState({\n                isSessionInterval: true\n              });\n\n              this.props.onTimerMinuteChange(this.props.sessionInterval);\n            }\n          } else {\n            this.props.onTimerMinuteChange(this.props.timerMinute - 1);\n            this.setState({\n              timerSeconds: 59\n            });\n          }\n          break;\n        default:\n          this.setState({\n            timerSeconds: this.state.timerSeconds - 1\n          });\n          break;\n      }\n    }, 1000);\n\n    this.setState({\n      intervalId: intervalId\n    });\n  }\n\n  resetTimer() {\n    clearInterval(this.state.intervalId);\n\n    this.props.resetTimer();\n    this.props.onPlayChange(false);\n\n    this.setState({\n      timerSeconds: 0\n    });\n  }\n\n  render() {\n    let timerClass = this.props.timerMinute === 0 ? \"timer-alert\" : \"\";\n    timerClass += \" session-timer\";\n    return (\n      <section>\n        <section id=\"session-container\">\n          <h4 className=\"session-header\">\n            {this.state.isSessionInterval ? \"Session\" : \"Break\"} :\n          </h4>\n          <span style={{ color: \"white\" }} className={timerClass}>\n            {this.props.timerMinute}\n          </span>\n          <span style={{ color: \"white\" }} className={timerClass} id=\"colon\">\n            :\n          </span>\n          <span style={{ color: \"white\" }} className={timerClass}>\n            {this.state.timerSeconds === 0\n              ? \"00\"\n              : this.state.timerSeconds < 10\n              ? \"0\" + this.state.timerSeconds\n              : this.state.timerSeconds}\n          </span>\n        </section>\n        <section id=\"actions-container\">\n          <button data-type=\"play\" onClick={this.playStopTimer}>\n            Play\n          </button>\n          <button data-type=\"stop\" onClick={this.playStopTimer}>\n            Stop\n          </button>\n          <button onClick={this.resetTimer}>Refresh</button>\n        </section>\n      </section>\n    );\n  }\n}\n\nexport default Timer;\n","import React from \"react\";\nimport BreakInterval from \"../src/components/BreakInterval/BreakInterval\";\nimport SessionInterval from \"../src/components/SessionInterval/SessionInterval\";\nimport TimerInterval from \"../src/components/TimerInterval/Timer\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      breakInterval: 10,\n      sessionInterval: 35,\n      timerMinute: 35,\n      isPlay: false\n    };\n\n    this.onBreakIntervalChange = this.onBreakIntervalChange.bind(this);\n    this.onSessionIntervalChange = this.onSessionIntervalChange.bind(this);\n    this.onTimerMinuteChange = this.onTimerMinuteChange.bind(this);\n    this.onPlayChange = this.onPlayChange.bind(this);\n    this.onResetTimer = this.onResetTimer.bind(this);\n  }\n\n  onPlayChange(isPlay) {\n    this.setState({\n      isPlay: isPlay\n    });\n  }\n\n  onBreakIntervalChange(newBreakLength) {\n    this.setState({\n      breakInterval: newBreakLength\n    });\n  }\n\n  onSessionIntervalChange(newSessionLength) {\n    this.setState({\n      sessionInterval: newSessionLength,\n      timerMinute: newSessionLength\n    });\n  }\n\n  onTimerMinuteChange(minuteChange) {\n    this.setState({\n      timerMinute: minuteChange\n    });\n  }\n\n  onResetTimer() {\n    this.setState({\n      sessionInterval: 35,\n      timerMinute: 35,\n      breakInterval: 10\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>Pomodoro Clock</h2>\n        <section className=\"length-container\">\n          <BreakInterval\n            onBreakIntervalChange={this.onBreakIntervalChange}\n            breakInterval={this.state.breakInterval}\n            isPlay={this.state.isPlay}\n          />\n          <SessionInterval\n            onSessionIntervalChange={this.onSessionIntervalChange}\n            sessionInterval={this.state.sessionInterval}\n            isPlay={this.state.isPlay}\n          />\n        </section>\n        <TimerInterval\n          sessionInterval={this.state.sessionInterval}\n          timerMinute={this.state.timerMinute}\n          onTimerMinuteChange={this.onTimerMinuteChange}\n          breakInterval={this.state.breakInterval}\n          onPlayChange={this.onPlayChange}\n          resetTimer={this.onResetTimer}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}